<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            // Add email_index column for searchable encrypted emails
            $table->string('email_index')->after('email')->nullable()->index();
            
            // Remove existing unique index on email since it will be encrypted
            try {
                // For PostgreSQL, we need to use dropIndex and proper index name conventions
                if (DB::connection()->getDriverName() === 'pgsql') {
                    // Check if the constraint exists
                    $constraintExists = DB::select("SELECT 1 FROM pg_constraint 
                        JOIN pg_class ON pg_constraint.conrelid = pg_class.oid 
                        WHERE pg_class.relname = 'users' 
                        AND pg_constraint.conname LIKE '%email%' 
                        AND pg_constraint.contype = 'u'");
                    
                    if (!empty($constraintExists)) {
                        // Get the actual constraint name
                        $constraintName = DB::select("SELECT conname FROM pg_constraint 
                            JOIN pg_class ON pg_constraint.conrelid = pg_class.oid 
                            WHERE pg_class.relname = 'users' 
                            AND pg_constraint.conname LIKE '%email%' 
                            AND pg_constraint.contype = 'u'")[0]->conname;
                        
                        DB::statement("ALTER TABLE users DROP CONSTRAINT \"{$constraintName}\"");
                    }
                } else {
                    // For MySQL and other drivers
                    $table->dropUnique('users_email_unique');
                }
            } catch (\Exception $e) {
                // Ignore if the unique index doesn't exist
            }
            
            // Add unique index on email_index instead
            $table->unique('email_index');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            // Remove the unique index on email_index
            try {
                if (DB::connection()->getDriverName() === 'pgsql') {
                    // Check if the constraint exists
                    $constraintExists = DB::select("SELECT 1 FROM pg_constraint 
                        JOIN pg_class ON pg_constraint.conrelid = pg_class.oid 
                        WHERE pg_class.relname = 'users' 
                        AND pg_constraint.conname LIKE '%email_index%' 
                        AND pg_constraint.contype = 'u'");
                    
                    if (!empty($constraintExists)) {
                        // Get the actual constraint name
                        $constraintName = DB::select("SELECT conname FROM pg_constraint 
                            JOIN pg_class ON pg_constraint.conrelid = pg_class.oid 
                            WHERE pg_class.relname = 'users' 
                            AND pg_constraint.conname LIKE '%email_index%' 
                            AND pg_constraint.contype = 'u'")[0]->conname;
                        
                        DB::statement("ALTER TABLE users DROP CONSTRAINT \"{$constraintName}\"");
                    }
                } else {
                    $table->dropUnique('users_email_index_unique');
                }
            } catch (\Exception $e) {
                // Ignore if the unique index doesn't exist
            }
            
            // Drop the email_index column
            $table->dropColumn('email_index');
            
            // Add back unique index on email
            $table->unique('email');
        });
    }
};